name: Sync Night Logger Violations

on:
  # Trigger when night logger detects usage
  repository_dispatch:
    types: [night-logger-sync]

  # Daily sync at 12 PM NYC time (EST/EDT aware)
  schedule:
    # 12 PM EST (UTC-5) = 17:00 UTC in winter
    # 12 PM EDT (UTC-4) = 16:00 UTC in summer
    # Using 17:00 UTC to cover EST, close enough for EDT
    - cron: '0 17 * * *'

  # Allow manual triggering for testing
  workflow_dispatch:

permissions:
  contents: write

jobs:
  sync-violations:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Get fresh violations.json from main branch
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "üîç Getting fresh violations.json from main branch..."

        # Download violations.json from main branch (most up-to-date)
        curl -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3.raw" \
             "https://api.github.com/repos/$GITHUB_REPOSITORY/contents/violations.json" \
             -o violations.json \
             --fail --silent --show-error || {
          echo "‚ÑπÔ∏è  No violations.json found in main branch"
          echo '{"violations": [], "unposted_violations": []}' > violations.json
        }

        if [ -s violations.json ]; then
          echo "‚úÖ Downloaded violations.json from main branch"
          python3 -c "
import json
from datetime import datetime, timedelta
data = json.load(open('violations.json'))
violations = data.get('violations', [])
unposted = data.get('unposted_violations', [])
print(f'Found {len(unposted)} unposted violations out of {len(violations)} total')

# Check if violations.json seems fresh (updated within last 3 days)
last_updated = data.get('last_updated', '1970-01-01T00:00:00Z')
last_updated_dt = datetime.fromisoformat(last_updated.replace('Z', '+00:00'))
age_hours = (datetime.now(last_updated_dt.tzinfo) - last_updated_dt).total_seconds() / 3600
print(f'Violations data age: {age_hours:.1f} hours')

if age_hours > 72:  # 3 days
    print('‚ö†Ô∏è  WARNING: Violations data is more than 3 days old and may be stale')
else:
    print('‚úÖ Violations data appears fresh')
"
        else
          echo "‚ÑπÔ∏è  Empty or missing violations.json"
        fi

    - name: Sync violations to Beeminder
      env:
        BEEMINDER_USERNAME: ${{ secrets.BEEMINDER_USERNAME }}
        BEEMINDER_AUTH_TOKEN: ${{ secrets.BEEMINDER_AUTH_TOKEN }}
        BEEMINDER_GOAL_SLUG: ${{ secrets.BEEMINDER_GOAL_SLUG }}
      run: |
        python sync_violations.py --violations-file violations.json

    - name: Update local database with posted violations (optional)
      run: |
        # This step could update a local SoT database if needed
        # For now, we rely on the violations.json as the source of truth
        echo "‚úÖ Violations sync completed - Beeminder is now up to date"

    - name: Clean up
      run: |
        # Remove downloaded violations file for security
        rm -f violations.json
        echo "üßπ Cleaned up temporary files"